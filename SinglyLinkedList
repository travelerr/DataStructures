//INSERT IN SORTED LIST
public class InsertInSortedList {
	public static Node insert(Node head, Node newNode) {
		
		//First node to be inserted into Linked List
		if(null == head){
			return newNode;
		}
		
		Node prev = null;
		Node iter = head;
		
		while(iter != null && iter.data< newNode.data){
			//take backup of prev node
			//used in spending the new node
			prev = iter;
			iter = iter.next;
		}
		
		newNode.next = prev.next;
		prev.next = newNode;
		return head;
	}
	
	public static void prepareList(Node head, int data) {
		
		while(head.next != null)
			head = head.next;
		head.next = new Node(data);
	}
	
	public static void print(Node head){
		
		while(head != null){
			System.out.printf("%d ", head.data);
			head = head.next;
		}
		System.out.println("");
	}
}



// NODE
public class Node {
	public int data;
	public Node next;
	
	public Node(int num){
		this.data = num;
		this.next = null;
	}

}

//SINGLY LINKED LIST CLIENT
import java.util.Random;

public class SinglyLinkedListClient {
	public static void main(String[] args){
		
		Random rand = new Random();
		
		int randInt1 = rand.nextInt(100);
		int randInt2 = rand.nextInt(500);
		int randInt3 = rand.nextInt(1000);
		
		int[] listData = {randInt1, randInt2, randInt3};
		Node head = new Node(listData[0]);
		
		for (int count = 1; count < listData.length; count++){
			InsertInSortedList.prepareList(head, listData[count]);
		}
		
		System.out.println("1. Single linked list is: ");
		InsertInSortedList.print(head);
		
		int newData = 587;
		Node newNode = new Node(newData);
		head = InsertInSortedList.insert(head, newNode);
		System.out.printf("2. Single linked list after inserting %d is:", newData);
		InsertInSortedList.print(head);
	}

}
